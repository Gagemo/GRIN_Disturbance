################## Save Figures Above using ggarrange ##########################
NMDS_22 =
ggarrange(NMDS_22, NMDS_Spp_graph_22, ncol = 2, nrow = 1,
common.legend = TRUE, legend="bottom")
NMDS_22
ggsave("Figures/Chapter 1 - Soil Disturbance Seasonality/2022_NMDS.png",
width = 19, height = 10, dpi = 700)
# Perform adonis to test the significance of treatments#
adon.results <- adonis2(Veg_Spp ~ NMDS$Treat, method="bray",perm=999)
print(adon.results)
pairwise.adonis<-pairwise.adonis2(Veg_Spp ~ Treatment, data = NMDS)
pairwise.adonis
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "All_Tables")
# Initialize starting row
start_row <- 1
# Loop through the list of tables and add each to the same sheet
for (name in names(pairwise.adonis)) {
# Add table name as a header
writeData(wb, sheet = "All_Tables", x = name, startRow = start_row, colNames = FALSE)
# Increment the starting row to leave a gap between the header and the table
start_row <- start_row + 1
# Check if the element is a data frame or a character string
if (is.data.frame(pairwise.adonis[[name]])) {
# Write the table
writeData(wb, sheet = "All_Tables", x = pairwise.adonis[[name]], startRow = start_row)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + nrow(pairwise.adonis[[name]]) + 2
} else if (is.character(pairwise.adonis[[name]])) {
# Write the character string
writeData(wb, sheet = "All_Tables", x = pairwise.adonis[[name]], startRow = start_row, colNames = FALSE)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + 2
}
}
# Save the workbook to an Excel file
saveWorkbook(wb, "Figures/Chapter 1 - Soil Disturbance Seasonality/pairwise_adonis_22_same_sheet.xlsx", overwrite = TRUE)
# Create species pivot table #
Spp = dplyr::select(GRIN_21, ID, Species, Coverage) %>% matrify()
# Transforms Data #
Veg_Spp = vegdist(Spp, method = 'bray')
# Create grouped treatment/environment table and summaries to fit species table#
Treat = group_by(GRIN_21, ID, Treatment) %>% dplyr::summarize()
NMDS.scree <- function(x) { # x is the name of the data frame variable
plot(rep(1, 10), replicate(10, metaMDS(x, autotransform = F, k = 1)$stress),
xlim = c(1, 10),ylim = c(0, 0.30), xlab = "# of Dimensions",
ylab = "Stress", main = "NMDS Stress Plot")
for (i in 1:10) {
points(rep(i + 1,10),
replicate(10, metaMDS(x, autotransform = F, k = i + 1)$stress))
}
}
# MDS and plot stress using a Shepherd Plot #
MDS = metaMDS(Spp, distance = 'bray', trymax = 500, maxit = 999, k=3,
trace = F, autotransform = FALSE, wascores = TRUE)
MDS$stress
stressplot(MDS)
goodness(MDS)
# Create a frame for functional groups alongside species for NMDS graph #
species_groups = group_by(GRIN_21, Species, Group, Native) %>% dplyr::summarize()
# Extract  species scores & convert to a data.frame for NMDS graph #
species.scores <- as.data.frame(wascores(MDS$points, Spp))
# create a column of species, from the row names of species.scores  #                                                            )
species.scores$species <- rownames(species.scores)
# create a column for functional groups for NMDS graph #
species.scores$Group <- species_groups$Group
# create a column for functional groups for NMDS graph #
species.scores$Native <- species_groups$Native
# Turn MDS points into a dataframe with treatment data for use in ggplot #
NMDS = data.frame(MDS = MDS$points, Treatment = Treat$Treatment,Plot = Treat$ID)
envfit_result <- envfit(MDS, Spp)
# Extract vectors and/or factors
vectors_df <- as.data.frame(envfit_result$vectors$arrows)
vectors_pvals <- as.data.frame(envfit_result$vectors$pvals)
if (!is.null(envfit_result$factors)) {
factors_df <- as.data.frame(envfit_result$factors$centroids)
factors_pvals <- as.data.frame(envfit_result$factors$pvals)
}
vectors_combined <- cbind(vectors_df, p_value = vectors_pvals)
write.csv(vectors_combined, "Figures/Chapter 1 - Soil Disturbance Seasonality/NMDS_FitValues_21.csv", row.names = TRUE)
# Perform Indicator Species Analysis
indicator_results <- indval(Spp, Treat$Treatment)
# Extract data frames
indval_df <- indicator_results$indval
species_names <- rownames(indval_df)
# Combine data into a single data frame
combined_df <- data.frame(
Species = species_names,
Indicator_Value_C = indval_df$C,
Indicator_Value_Tsp = indval_df$Tsp,
Indicator_Value_Tw = indval_df$Tw,
Max_Class = indicator_results$maxcls,
Indicator_Class = indicator_results$indcls,
P_Value = indicator_results$pval
)
# Filter for significant species (p < 0.05)
significant_species <- combined_df[combined_df$P_Value < 0.05, ]
# Add rank column based on indicator value in the max class
significant_species$Rank <- ave(significant_species$Max_Class, significant_species$Max_Class, FUN = rank)
# Save the combined data frame to CSV
write.csv(significant_species, file = "Figures/Chapter 1 - Soil Disturbance Seasonality/indicator_species_analysis_results_21.csv", row.names = TRUE)
simper_result <- simper(Spp, Treat$Fire, permutations = 99)
simper_summary <- summary(simper_result)
simper_result <- simper(Spp, Treat$Treatment, permutations = 99)
simper_summary <- summary(simper_result)
simper_summary
# Extract the first pairwise comparison (adjust as needed)
pairwise_data <- simper_result[[1]]
# Create the data frame with p-values
table_data <- data.frame(
Species = names(pairwise_data$average),
Contribution = pairwise_data$average,
SD = pairwise_data$sd,
P_value = pairwise_data$p,
Cumulative_Contribution = pairwise_data$cusum
)
# Sort by contribution
table_data <-
table_data[order(table_data$Contribution, decreasing = TRUE), ]
# Add rank column
table_data$Rank <- seq_len(nrow(table_data))
head(table_data)
write.csv(
table_data, file = "Figures/Chapter 1 - Soil Disturbance Seasonality/SIMPER_21.csv", row.names = TRUE)
NMDS_21 =
ggplot() +
geom_point(data = NMDS, aes(x = MDS.MDS1, y = MDS.MDS2, fill = Treatment),
alpha = 0.7, size = 6, shape = 21) +
# geom_text(data = species.scores, aes(x = NMDS1, y = NMDS2, label = species)) +
annotate("text", x = -1, y = 0.8,
label = paste0("Stress: ", format(MDS$stress, digits = 2)),
hjust = 0, size = 8) +
# stat_ellipse(data = NMDS, aes(x = MDS.MDS1, y = MDS.MDS2, color = Treatment,
#                               fill = Treatment),geom = "polygon",
#              alpha = 0.15, linetype = "solid", show.legend = T) +
scale_color_manual(labels=c('No-Till', 'Late-Spring', 'Winter'),
values=c("#FF3399", "#FFFF00", "#3366FF")) +
scale_fill_manual(labels=c('No-Till', 'Late-Spring', 'Winter'),
values=c("#FF3399", "#FFFF00", "#3366FF")) +
ggtitle("2021") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, color="black",
size=25, face="bold"),
axis.title.x = element_text(size=25, face="bold", colour = "black"),
axis.title.y = element_text(size=25, face="bold", colour = "black"),
axis.text.x=element_text(size=25, face = "bold", color = "black"),
axis.text.y=element_text(size=25, face = "bold", color = "black"),
legend.text=element_text(size=25, face = "bold", color = "black"),
legend.title=element_text(size=25, face = "bold", color = "black"),
legend.position="bottom") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "MDS1", y = "MDS2")
NMDS_21
NMDS_Spp_graph_21 =
ggplot() +
#  geom_point(data = species.scores, aes(x = MDS1, y = MDS2, fill = Native),
#               alpha = 0.7, size = 6, shape = 21) +
geom_text_repel(data = species.scores, aes(x = MDS1, y = MDS2),
label = species.scores$species, colour = "black",
size = 6, fontface = "bold") +
annotate("text", x = -1, y = 1,
label = paste0("Stress: ", format(MDS$stress, digits = 2)),
hjust = 0, size = 8) +
ggtitle("2021") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, color="black",
size=25, face="bold"),
axis.title.x = element_text(size=25, face="bold", colour = "black"),
axis.text.x=element_text(size=25, face = "bold", color = "black"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=25, face = "bold", color = "black"),
legend.title=element_text(size=25, face = "bold", color = "black"),
legend.position="bottom") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "MDS1", y = "MDS2", color = "Treatment",
fill = "Treatment")
NMDS_Spp_graph_21
# Perform adonis to test the significance of treatments#
adon.results <- adonis2(Veg_Spp ~ NMDS$Treatment, method="bray",perm=999)
print(adon.results)
pairwise.adonis<-pairwise.adonis2(Veg_Spp ~ Treatment, data = NMDS)
pairwise.adonis
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "All_Tables")
# Initialize starting row
start_row <- 1
# Loop through the list of tables and add each to the same sheet
for (name in names(pairwise.adonis)) {
# Add table name as a header
writeData(wb, sheet = "All_Tables", x = name, startRow = start_row, colNames = FALSE)
# Increment the starting row to leave a gap between the header and the table
start_row <- start_row + 1
# Check if the element is a data frame or a character string
if (is.data.frame(pairwise.adonis[[name]])) {
# Write the table
writeData(wb, sheet = "All_Tables", x = pairwise.adonis[[name]], startRow = start_row)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + nrow(pairwise.adonis[[name]]) + 2
} else if (is.character(pairwise.adonis[[name]])) {
# Write the character string
writeData(wb, sheet = "All_Tables", x = pairwise.adonis[[name]], startRow = start_row, colNames = FALSE)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + 2
}
}
# Save the workbook to an Excel file
saveWorkbook(wb, "Figures/Chapter 1 - Soil Disturbance Seasonality/pairwise_adonis_21_same_sheet.xlsx", overwrite = TRUE)
################## Save Figures Above using ggarrange ##########################
NMDS_21 =
ggarrange(NMDS_21, NMDS_Spp_graph_21, ncol = 2, nrow = 1,
common.legend = TRUE, legend="bottom")
ggsave("Figures/Chapter 1 - Soil Disturbance Seasonality/2021_NMDS.png",
width = 19, height = 10, dpi = 700)
# Create species pivot table #
Spp = dplyr::select(GRIN_20, ID, Species, Coverage) %>% matrify()
Veg_Spp = vegdist(Spp, method = 'bray')
# Create grouped treatment/environment table and summaries to fit species table#
Treat = group_by(GRIN, ID, Treatment) %>% dplyr::summarize()
NMDS.scree <- function(x) { # x is the name of the data frame variable
plot(rep(1, 10), replicate(10, metaMDS(x, autotransform = F, k = 1)$stress),
xlim = c(1, 10),ylim = c(0, 0.30), xlab = "# of Dimensions",
ylab = "Stress", main = "NMDS Stress Plot")
for (i in 1:10) {
points(rep(i + 1,10),
replicate(10, metaMDS(x, autotransform = F, k = i + 1)$stress))
}
}
# MDS and plot stress using a Shepherd Plot #
MDS = metaMDS(Spp, distance = 'bray', trymax = 500, maxit = 999, k=3,
trace = F, autotransform = FALSE, wascores = TRUE)
MDS$stress
stressplot(MDS)
goodness(MDS)
# Create a frame for functional groups alongside species for NMDS graph #
species_groups = group_by(GRIN_20, Species, Group) %>% dplyr::summarize()
# Extract  species scores & convert to a data.frame for NMDS graph #
species.scores <- as.data.frame(wascores(MDS$points, Spp))
# create a column of species, from the row names of species.scores  #                                                            )
species.scores$species <- rownames(species.scores)
# create a column for functional groups for NMDS graph #
species.scores$Group <- species_groups$Group
# Turn MDS points into a dataframe with treatment data for use in ggplot #
NMDS = data.frame(MDS = MDS$points, Treatment = Treat$Treatment,
Plot = Treat$ID)
envfit_result <- envfit(MDS, Spp)
# Extract vectors and/or factors
vectors_df <- as.data.frame(envfit_result$vectors$arrows)
vectors_pvals <- as.data.frame(envfit_result$vectors$pvals)
if (!is.null(envfit_result$factors)) {
factors_df <- as.data.frame(envfit_result$factors$centroids)
factors_pvals <- as.data.frame(envfit_result$factors$pvals)
}
vectors_combined <- cbind(vectors_df, p_value = vectors_pvals)
write.csv(vectors_combined, "Figures/Chapter 1 - Soil Disturbance Seasonality/NMDS_FitValues_20.csv", row.names = TRUE)
# Perform Indicator Species Analysis
indicator_results <- indval(Spp, Treat$Treatment)
# Extract data frames
indval_df <- indicator_results$indval
species_names <- rownames(indval_df)
# Combine data into a single data frame
combined_df <- data.frame(
Species = species_names,
Indicator_Value_C = indval_df$C,
Indicator_Value_Tsp = indval_df$Tsp,
Indicator_Value_Tw = indval_df$Tw,
Max_Class = indicator_results$maxcls,
Indicator_Class = indicator_results$indcls,
P_Value = indicator_results$pval
)
# Filter for significant species (p < 0.05)
significant_species <- combined_df[combined_df$P_Value < 0.05, ]
# Add rank column based on indicator value in the max class
significant_species$Rank <- ave(significant_species$Max_Class, significant_species$Max_Class, FUN = rank)
# Save the combined data frame to CSV
write.csv(significant_species, file = "Figures/Chapter 1 - Soil Disturbance Seasonality/indicator_species_analysis_results_20.csv", row.names = TRUE)
simper_result <- simper(Spp, Treat$Fire, permutations = 99)
simper_summary <- summary(simper_result)
simper_summary
# Extract the first pairwise comparison (adjust as needed)
pairwise_data <- simper_result[[1]]
# Create the data frame with p-values
table_data <- data.frame(
Species = names(pairwise_data$average),
Contribution = pairwise_data$average,
SD = pairwise_data$sd,
P_value = pairwise_data$p,
Cumulative_Contribution = pairwise_data$cusum
)
# Sort by contribution
table_data <-
table_data[order(table_data$Contribution, decreasing = TRUE), ]
simper_result <- simper(Spp, Treat$Treatment, permutations = 99)
simper_summary <- summary(simper_result)
simper_summary
# Extract the first pairwise comparison (adjust as needed)
pairwise_data <- simper_result[[1]]
# Create the data frame with p-values
table_data <- data.frame(
Species = names(pairwise_data$average),
Contribution = pairwise_data$average,
SD = pairwise_data$sd,
P_value = pairwise_data$p,
Cumulative_Contribution = pairwise_data$cusum
)
# Sort by contribution
table_data <-
table_data[order(table_data$Contribution, decreasing = TRUE), ]
# Add rank column
table_data$Rank <- seq_len(nrow(table_data))
head(table_data)
write.csv(
table_data, file = "Figures/Chapter 1 - Soil Disturbance Seasonality/SIMPER_20.csv", row.names = TRUE)
NMDS_20 =
ggplot() +
geom_point(data = NMDS, aes(x = MDS.MDS1, y = MDS.MDS2, fill = Treatment),
alpha = 0.7, size = 6, shape = 21) +
# geom_text(data = species.scores, aes(x = NMDS1, y = NMDS2, label = species)) +
annotate("text", x = -1, y = 0.8,
label = paste0("Stress: ", format(MDS$stress, digits = 2)),
hjust = 0, size = 8) +
scale_color_manual(labels=c('No-Till', 'Late-Spring', 'Winter'),
values=c("#FF3399", "#FFFF00", "#3366FF")) +
scale_fill_manual(labels=c('No-Till', 'Late-Spring', 'Winter'),
values=c("#FF3399", "#FFFF00", "#3366FF")) +
ggtitle("Pre-Treatment 2020") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, color="black",
size=25, face="bold"),
axis.title.x = element_text(size=25, face="bold", colour = "black"),
axis.title.y = element_text(size=25, face="bold", colour = "black"),
axis.text.x=element_text(size=25, face = "bold", color = "black"),
axis.text.y=element_text(size=25, face = "bold", color = "black"),
legend.text=element_text(size=25,face = "bold", color = "black"),
legend.title=element_text(size=25,face = "bold", color = "black"),
legend.position="bottom") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "MDS1", y = "MDS2")
NMDS_20
NMDS_Spp_graph_20 =
ggplot() +
geom_text_repel(data = species.scores, aes(x = MDS1, y = MDS2),
label = species.scores$species, colour = "black",
size = 6, fontface = "bold") +
annotate("text", x = -1, y = 1,
label = paste0("Stress: ", format(MDS$stress, digits = 2)),
hjust = 0, size = 8) +
ggtitle("2020") +
theme_classic() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
plot.title = element_text(hjust = 0.5, color="black",
size=25, face="bold"),
axis.title.x = element_text(size=25, face="bold", colour = "black"),
axis.text.x=element_text(size=25, face = "bold", color = "black"),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.line.y = element_blank(),
axis.title.y=element_blank(),
legend.text=element_text(size=25, face = "bold", color = "black"),
legend.title=element_text(size=25, face = "bold", color = "black"),
legend.position="bottom") +
guides(fill = guide_legend(label.position = "bottom")) +
labs(x = "MDS1", y = "MDS2", color = " Treatment",
fill = " Treatment")
NMDS_Spp_graph_20
NMDS_20 =
ggarrange(NMDS_20, NMDS_Spp_graph_20, ncol = 2, nrow = 1,
common.legend = TRUE, legend="bottom")
NMDS_20
ggsave("Figures/Chapter 1 - Soil Disturbance Seasonality/2020_NMDS.png",
width = 10, height = 7)
# Perform adonis to test the significance of treatments#
adon.results <- adonis2(Veg_Spp ~ NMDS$Treat, method="bray",perm=999)
print(adon.results)
pairwise.adonis<-pairwise.adonis2(Veg_Spp ~ Treatment, data = NMDS)
pairwise.adonis
wb <- createWorkbook()
# Add a worksheet
addWorksheet(wb, "All_Tables")
# Initialize starting row
start_row <- 1
# Loop through the list of tables and add each to the same sheet
for (name in names(pairwise.adonis)) {
# Add table name as a header
writeData(wb, sheet = "All_Tables", x = name, startRow = start_row, colNames = FALSE)
# Increment the starting row to leave a gap between the header and the table
start_row <- start_row + 1
# Check if the element is a data frame or a character string
if (is.data.frame(pairwise.adonis[[name]])) {
# Write the table
writeData(wb, sheet = "All_Tables", x = pairwise.adonis[[name]], startRow = start_row)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + nrow(pairwise.adonis[[name]]) + 2
} else if (is.character(pairwise.adonis[[name]])) {
# Write the character string
writeData(wb, sheet = "All_Tables", x = pairwise.adonis[[name]], startRow = start_row, colNames = FALSE)
# Increment the starting row for the next table, adding a few extra rows for spacing
start_row <- start_row + 2
}
}
# Save the workbook to an Excel file
saveWorkbook(wb, "Figures/Chapter 1 - Soil Disturbance Seasonality/pairwise_adonis_20_same_sheet.xlsx", overwrite = TRUE)
######################### Clears Environment & History  ########################
rm(list=ls(all=TRUE))
cat("\014")
#########################     Installs Packages   ##############################
list.of.packages <- c("tidyverse", "vegan", "agricolae", "extrafont", "plotrix",
"ggsignif", "multcompView", "ggpubr", "rstatix", "labdsv",
"tables")
new.packages <- list.of.packages[!(list.of.packages %in%
installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
##########################     Loads Packages     ##############################
library(tidyverse)
library(vegan)
library(labdsv)
library(agricolae)
library(extrafont)
library(ggsignif)
library(multcompView)
library(ggpubr)
library(plotrix)
library(rstatix)
library(tables)
##########################     Read in  Data       #############################
Data = read.csv("Data/GRIN - 2020-2023.csv")
Data$Coverage = as.numeric(Data$Coverage)
# Reclasifys coverage data (CV) from 1-10 scale to percent scale #
Data <- mutate(Data, Coverage = case_when(
grepl(10, Coverage) ~ 97.5,
grepl(0, Coverage) ~ 0,
grepl(1, Coverage) ~ 0.1,
grepl(2, Coverage) ~ 0.5,
grepl(3, Coverage) ~ 1.5,
grepl(4, Coverage) ~ 3.5,
grepl(5, Coverage) ~ 7.5,
grepl(6, Coverage) ~ 17.5,
grepl(7, Coverage) ~ 37.5,
grepl(8, Coverage) ~ 62.5,
grepl(9, Coverage) ~ 85
))
str(Data)
summary(Data)
# Remove Seeding Treatment #
Data = filter(Data, Treatment != 'S')
Data$YID <- paste(Data$Year,Data$ID)
Data$ID_ <- paste(Data$Treatment, Data$ID)
# Orders years and treatments so that they display in same sequence in graphs #
Data$Year = factor(Data$Year, levels=c('1','2'))
#################### Species abundances ########################################
# Creates and joins  data year 22 & 23 to make long data format #
Two_Abundance <- Data[which(Data$Year == "1"),]
Three_Abundance <- Data[which(Data$Year == "2"),]
Abundance_w <- full_join(Two_Abundance, Three_Abundance,
by = c('ID_', "Treatment", 'Species'))
Abundance_w = arrange(Abundance_w, Treatment)
# Turns NA values into zeros #
Abundance_w$Coverage.x <- ifelse(is.na(Abundance_w$Coverage.x), 0,
Abundance_w$Coverage.x)
Abundance_w$Coverage.y <- ifelse(is.na(Abundance_w$Coverage.y), 0,
Abundance_w$Coverage.y)
# Change abundance to reflect percentage change from (Year 1) to (Year 2)  #
Change_Abundance <- Abundance_w %>%
dplyr::select(ID_, Treatment, Species,
Coverage.x, Coverage.y) %>%
group_by(ID_, Treatment, Species) %>%
mutate(Change_abundance = Coverage.y - Coverage.x)
################################################################################
########################### Hairy Indig ########################################
################################################################################
Ih =
Change_Abundance[which(Change_Abundance$Species == "Indigofera hirsuta"),]
Ih<-as.data.frame(Ih)
Ih$Treatment<-factor(Ih$Treatment)
# Check Assumptions #
model  <- lm(Change_abundance ~ Treatment, data = Ih)
# Create a QQ plot of residuals
ggqqplot(residuals(model))
# Compute Shapiro-Wilk test of normality
shapiro_test(residuals(model))
plot(model, 1)
# Test for Significance #
anova_Ih = Ih %>% anova_test(Change_abundance ~ Treatment) %>%
add_significance()
anova_Ih
lm(formula = Change_abundance ~ Treatment, Ih)
tukey_Ih <- Ih %>%
tukey_hsd(Change_abundance ~ Treatment) %>%
add_significance() %>%
add_xy_position()
tukey_Ih
tmp <- tabular(Treatment ~ Change_abundance* (mean+sd+std.error), data=Ih)
tmp
